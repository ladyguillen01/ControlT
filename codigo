#1. cargo mi data
data2=spark.sql(f"""select*from catalog_lhcl_prod_bcp.bcp_edv_rbm.T65734_caldesagregada""").toPandas()
#2. filtro las columnas y filas con las que voy a trabajar
datafiltrada = data2[(data2['cosecha'].isin([202410, 202409, 202408, 202403, 202402, 202401, 202311, 202310, 202308, 202309, 202307, 202305, 202302, 202303, 202304]))][['cosecha', 'maduracion', 'provisionporc', 'pdponderado']]
#3. calcule las fórmulas que siguen las maduraciones para cada codmes: y_i=a*(codmes)^2 +b*codmes + c ;i=cosecha   y obtener una relación cdmes provisionporcacum
#donde la provisionporcacum es el Acumulado de xcada cosecha ordenado por maduración 

maduraciones = [202410, 202409, 202408, 202403, 202402, 202401, 202311, 202310, 202308, 202309, 202307, 202305, 202302, 202303, 202304]
for maduracion in maduraciones:
    data = datafiltrada[(datafiltrada['cosecha'].isin([maduracion]))][['cosecha', 'maduracion', 'provisionporc', 'pdponderado']].sort_values(by='maduracion')
    data['provisioncumsum'] = data['provisionporc'].cumsum()
    grado = 2
    coef = np.polyfit(data['maduracion'].to_numpy().astype(float), data['provisioncumsum'].to_numpy().astype(float), grado)  # coeficientes del polinomio
    polinomio = np.poly1d(coef)     # función polinómica
    # Predicciones
    prediccion = polinomio(data['maduracion'].to_numpy().astype(float))
    # Calcular R²
    from sklearn.metrics import r2_score
    r2 = r2_score(data['provisioncumsum'].to_numpy().astype(float), prediccion)
    print(f"Maduración: {maduracion}")
    print(f"Coeficientes del polinomio: {coef}")
    print(f"R²: {r2:.4f}")
    print()
#4. En base a las formulas polinómicas calculé otra formula polinómica para relacionar cada factor de mis primeros modelos para las cosechas con las pdponderado

#5- convertí los datos a decimal
#import pandas as pd
#from sklearn.metrics import r2_score
data['maduracion']=data['maduracion'].astype(float)
data['provisionporc']=data['provisionporc'].astype(float)
data['pdponderado']=data['pdponderado'].astype(float)
data['provisioncumsum']=data['provisioncumsum'].astype(float)
data.dtypes

#6. # Aplicar la fórmula
data['proyectado'] = (
    (0.06340894 * data['provisioncumsum']**2 - 0.00978566 * data['provisioncumsum'] + 0.00026513) * data['maduracion']**2 +
    (0.854266795 * data['provisioncumsum']**2 + 0.0313562571 * data['provisioncumsum'] - 0.000346035382) * data['maduracion'] +
    (2.56530353 * data['provisioncumsum']**2 - 0.31603608 * data['provisioncumsum'] + 0.01435779)
)

# Calcular R² y correlación
r2 = r2_score(data['pdponderado'], data['proyectado'])
correlacion = data['proyectado'].corr(data['pdponderado'])

print(data)
print(f"\nR²: {r2}")
print(f"Correlación: {correlacion}")

##pero la correlación me sale muy bajita u cuadndo corroboro con algunos emeses, la info de estas es errónea
